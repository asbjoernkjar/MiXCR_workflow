import os
import pandas as pd
import sys
configfile: "config/config.yaml"


#loading config file
out_path = config["out_path"] if config["out_path"] is not None else "results"  #default = results
#getting colnames for controlling workflow
sample_id_colname = config["Sample_ID_colname"]
R1_colname = config["R1_colname"]
R2_colname = config["R1_colname"]

#loading samples
sample_df = pd.read_csv(config["sample_file"], sep = "\t", dtype = str)
sample_df = sample_df.dropna(subset=[sample_id_colname, R1_colname,R2_colname]) #drop rows without sample

onstart:
    if out_path == "results" and not os.path.isdir("results"): #make results if this is out_path
        os.mkdir("results")
    os.system("mkdir -p logs/old; mv logs/*.{err,out} logs/old 2> /dev/null") #move logs, for convinience 


#input fuction for fetching R1/R2 paths 
def extract_from_sample(df,key_col,val_col , suffix = ""):
    """Function that can extract a datapoint from df"""
    def input_func(wildcards):
        return suffix + df.loc[df[key_col] == wildcards.sample, val_col].iloc[0] 
    return input_func

get_R1 = extract_from_sample(sample_df,sample_id_colname,R1_colname)
get_R2 = extract_from_sample(sample_df,sample_id_colname,R2_colname)




rule all:
    input:
        expand(out_path + "/{sample_name}.clonotypes.TRB.txt",
        sample_name = sample_df[sample_id_colname].to_list())



rule run_mixcr:
    """
    Runs mixcr workflow on an amplified TCR-Beta sample 
    settings are optimized for AmpliSeq for Illumina TCR beta-SR Panel kit - using DNA material
    Exctract only TCR-beta clones --> others are false positives 
    """
    threads: 8 #possibly scale down? 
    resources:
        walltime = "3:00:00",  
        mem_mb = 8000,
    conda:
        "envs/MiXCR.yaml"
    input:
        inp_R1 = get_R1,
        inp_R2 = get_R2,
    output:
        out_clns = out_path + "/{sample}.clns",  #maybe change this ending?
        out_vdjca = out_path + "/{sample}.vdjca",
        out_TRB = out_path + "/{sample}.clonotypes.TRB.txt",
        out_report = out_path + "/{sample}.report",
    params:
        mixcr_jar = config["mixcr_jar_path"],
        out_dir = out_path + "/{sample}", #note this is path + prefix of output files

    shell:"""
    java -Xmx4g -Xms3g \
        -jar {params.mixcr_jar} \
        analyze amplicon \
        -s hsa \
        --threads {threads} \
        --starting-material dna \
        --5-end v-primers \
        --3-end j-primers \
        --adapters adapters-present \
        --receptor-type trb \
        --report {output.out_report} \
        {input.inp_R1} \
        {input.inp_R2} \
        {params.out_dir}
    """
